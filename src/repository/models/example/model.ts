/**
 * @file example entity model
 */

import type { CoreTypes } from '../../../types/core'
import type { DomainModel, ExampleDomainObject } from '../../../types/domain/models'
import type { EntityModelMarshaller, ExampleEntityModel, MarshalParams } from '../types'

interface Dependencies {
  core: CoreTypes
}

export default function example(deps: Dependencies): EntityModelMarshaller {
  const { core: { InternalServerError, model } } = deps

  function marshal(params: MarshalParams): DomainModel {
    const { meta, solo = true } = params

    const entityModelData = <ExampleEntityModel[]>params.data

    const { length } = entityModelData
    if (solo && length > 1) {
      throw new InternalServerError(`marhsal input data with length '${length}' must contain one and only one object for single object serialization`)
    }

    const data = entityModelData
      .reduce((acc: Array<ExampleDomainObject>, elem: ExampleEntityModel) => {
        const marshalled = marshalData({ data: elem })
        acc.push(marshalled)
        return acc
      }, [])

    return { data, meta, solo, type: model.example }
  }

  function marshalData({ data }: { data: ExampleEntityModel }): ExampleDomainObject {
    // `id` is always present (generated by db)
    const id = data.id as unknown as string

    const {
      created_by,
      created_on,
      description,
      enabled,
      modified_by,
      modified_on,
      status,
      title,
    } = data

    return {
      attributes: {
        created_by,
        created_on,
        description,
        enabled,
        id,
        modified_by,
        modified_on,
        status,
        title,
      },
      meta: null, // TODO
      related: [], // TODO
      type: 'example', // TODO
    }
  }

  return { marshal }
}

export const inject = {
  require: {
    core: 'core',
  },
}
